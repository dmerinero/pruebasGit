
		 Introducción
		--------------

Git es un software abierto para el Sistema de Gestión de Versiones de tipo distribuido
(aunque ofrece la posivilidad de trabajar también en local y en remoto) que trabaja
guardando el estado de los ficheros 



		 Primeros pasos con Git
		------------------------

En primer lugar instalaremos la bash de Git (en función de nuestro Sistema Operativo la instalación sera distinta (captain obvious), para más información mirar los documentos de instalación anexos o en su defecto la documentación oficial de Git).

A continuación, nos crearemos una cuenta en GitHub (a día de hoy, año 2017, si se emplea la cuenta de correo de alumnos UPM se permite crear repositorios privados). Habrá que seguir los pasos para la creación de la cuenta.

Seguiremos configurando los parámetros de nuestro Git con los comandos:

	git config --global core.editor <nombre de nuestro editor favorito>
	git config --global user.name <nombre de usuario de GitHub>
	git config --global user.email <dirección de correo electrónico (preferiblemente la que hemos utilizado para crear la cuenta en GitHub)>

o, si se prefiere, también es posible modificar el fichero de configuracion con el comando:

	git config --global --edit


 1. Trabajando en un repositorio local
---------------------------------------

 	 1.1. Lo básico:
	-----------------

Para comenzar la gestión de versiones del proyecto (una vez tengamos un proyecto creado) utilizaremos los comandos:

	git init	->	para inicializar el repositorio local

Después, utilizaremos el comando:

	git status	->	revisa el estado de los ficheros bajo control de Git

para saber que ficheros no están preparados para el commit. Para preparar un fichero para el commit, basta con usar el comando:

	git add <nombre del fichero + extensión>	->	añade el fichero a la cola de preparados para el commit. Es de buena praxis utilizar git status después para comprobar el cambio
	git commit -m "<mensaje referente al cambio>"	->	guarda los cambios en el repositorio local

o también se pueden combinar ambos con el comando:

	git commit -a -m "<mensaje referente al cambio>"	->	realiza un commit sobre todos los ficheros modificados o añadidos

	git remote add origin <URL del repositorio>	->	para identificar el repositorio remoto

	git push -u <rama local> <rama repositorio>	->	sube los cambios de la rama local a la rama del repositorio remoto de GitHub
	
	git config --list				-> 	lista todos los parámetros de la configuración
	git branch -vv
	git log <rama local>..<rama remota (en formato de dirección relativa. Ejemplo: origin/master)>

Para hacer un rollback:
	git log --oneline 				->	lista todos los commit con su su checksum
desde la rama master:
	git merge <checksum al que queremos volver>	->	vuelve al commit elegido
Una vez creada, crearemos un repositorio en GitHub y abriremos un bash de Git en nuestro workspace (la forma de acceder a la bash variará en función del Sistema Operativo).
